*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}

/* 
https://developer.mozilla.org/ko/docs/Web/CSS/Using_CSS_custom_properties
규칙 집합의 선택자는 사용자 지정 속성을 사용할 수 있는 범위를 정의합니다. 
흔히 보이는 패턴은 :root 의사 클래스에 선언해서 여러분의 HTML 문서 어디에서나 사용자 지정 속성에 접근할 수 있도록 구성하는 것입니다.

:root {
  --main-bg-color: brown;
} 

.one {
  color: white;
  background-color: var(--main-bg-color);
  margin: 10px;
  width: 50px;
  height: 50px;
  display: inline-block;
}

*/


:root{
    --clr: #222327;
}

body{
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  /* //CSS "100%" vs "100vh" 의 차이점 */
  /* 100% => 부모 태그의 100% */
  /* 100vh => viewPort 100% */
  background: var(--clr);
}

/* item 영역 */
.navigation{
  position: relative;
  width: 400px;
  height: 70px;
  background-color: #fff;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 10px;
}

/* //네비게이션 item값 고정 */
.navigation ul{
  display: flex;
  width: 350px;
}

/* relativestatic이었을 때 배치되는 위치를 기준으로 상대적 위치를 지정할 수 있는 속성값입니다.  */
.navigation ul li {
  position: relative;
  list-style: none;
  width: 120px;
  height: 70px;
  z-index: 1;
}

.navigation ul li a{
  position: relative;
  display: flex;
  justify-content: center;
  flex-direction: column;
  width: 100%;
  text-align: center;
  font-weight: 500;
  align-items: center;
}

 

/* - em : font_size, 해당폰트의 대문자 M의 너비를 기준으로 함.
- ex : x-height, 해당폰트의 소문자 x의 높이를 기준으로 함.
- px : pixel, 표시장치(모니터)에 따라서 상대적인 크기를 가짐.
- %  : percent, 기본글꼴의 크기에 대하여 상대적인 값을 가짐.
- pt  : point, 일반 문서(워드 등)에서 많이 사용하는 단위 */

.navigation ul li a .icon{
  position: relative;
  display: block;
  line-height: 75px;
  font-size: 1.5em;
  text-align: center;
  transition: 0.5s;
  color: var(--clr);
}

/* .navigation ul li:hover a .icon{ */
.navigation ul li.active a .icon{
  transform: translateY(-35px);
}

.navigation ul li a .text{
  position: absolute;
  color: var(--clr);
  font-weight: 400;
  font-size: 0.75em;
  letter-spacing: 0.05em;
  transition: 0.5s;
  opacity: 0;
  transform: translateY(20px);
}

/* .navigation ul li:hover a .text{ */
.navigation ul li.active a .text{
  opacity: 1;
  transform: translateY(10px);
}

.indicator{
  position: absolute;
  top: -50%;
  width: 70px;
  height: 70px;
  background: skyblue;  
  border-radius: 50%;
  border: 6px solid var(--clr);
  transition: 0.5s;
  
}


/*
단, 상위 엘리먼트 중에 position 속성이 relative인 엘리먼트가 있다면,
 그 중 가장 가까운 엘리먼트의 내부에서만 엘리먼트를 자유롭게 배치할 수 있습니다. 
 즉, 전체 화면이 아닌 해당 상위 엘리먼트를 기준으로 offset 속성(top, left, bottom, right)이 적용됩니다.
 부모 엘리먼트 내부에 속박되지 않고, 독립된 배치 문맥(positioning context)을 가지게 됩니다. 
 마치 포토샵 같은 그래픽 툴에서 새로운 레이어를 추가하는 효과에 비슷하다고 생각하시면 됩니다.
*/
.indicator::before{
  content: '';
  position: absolute;
  top: 50%;
  left: -22px;
  width: 20px;
  height: 20px;
  background-color: transparent;
  border-top-right-radius: 20px;
  box-shadow: 1px -10px 0 0 var(--clr);
}

.indicator::after{
  content: '';
  position: absolute;
  top: 50%;
  right: -22px;
  width: 20px;
  height: 20px;
  background-color: transparent;
  border-top-left-radius: 20px;
  /* offset-x | offset-y | blur-radius | spread-radius | color */
  box-shadow: -1px -10px 0 0 var(--clr);
}

.navigation ul li:nth-child(1).active ~ .indicator{
  /* .navigation ul li 넓이값(70px)만큼 이동 */
  /* calc  CSS 속성의 값으로 계산식을 지정할 ; */
  /* transform: translateY(-35px); */
  transform: translateX(calc(120px * 0));

}

.navigation ul li:nth-child(2).active ~ .indicator{
  /* .navigation ul li 넓이값(70px)만큼 이동 */
  /* calc  CSS 속성의 값으로 계산식을 지정할 ; */
  /* transform: translateY(-35px); */
  transform: translateX(calc(120px * 1));

}

.navigation ul li:nth-child(3).active ~ .indicator{
  /* .navigation ul li 넓이값(70px)만큼 이동 */
  /* calc  CSS 속성의 값으로 계산식을 지정할 ; */
  /* transform: translateY(-35px); */
  transform: translateX(calc(120px * 2));

}